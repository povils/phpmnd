#!/usr/bin/env php
<?php

if (version_compare('5.6.0', PHP_VERSION, '>')) {
    fwrite(
        STDERR,
        sprintf(
           'This version of PHPMND is supported on PHP 5.6, PHP 7.0, and PHP 7.1.' . PHP_EOL .
           'You are using PHP %s%s.' . PHP_EOL,
           PHP_VERSION,
           defined('PHP_BINARY') ? ' (' . PHP_BINARY . ')' : ''
        )
    );
    exit(1);
}

$loaded = false;
$autoloads = [
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php',
];
foreach ($autoloads as $file) {
    if (file_exists($file)) {
        require_once $file;
        $loaded = true;
        break;
    }
}

if (false === $loaded) {
    exit(
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}
ini_set('xdebug.max_nesting_level', 10000);

$application = new Povils\PHPMND\Console\Application;
$application->add(new Povils\PHPMND\Console\Command);
if ('phar:' === substr(__FILE__, 0, 5)) {
    $application->add(new Povils\PHPMND\Console\Command\SelfUpdate);
}

$output = new Symfony\Component\Console\Output\ConsoleOutput();
$input = new \Symfony\Component\Console\Input\ArgvInput(prepareArgv());
$application->run($input, $output);

function prepareArgv()
{
    $argv = $_SERVER['argv'];

    $found = false;

    if (isset($argv[1]) && ('run' === $argv[1] || 'self-update' === $argv[1])) {
        $found = true;
    }

    if (!$found) {
        array_splice($argv, 1, 0, ['run']);
    }

    return $argv;
}
